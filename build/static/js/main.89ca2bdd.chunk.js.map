{"version":3,"sources":["images/marcador-map.svg","Loading.js","MapContainer.js","Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Loading","props","react_default","a","createElement","className","MapContainer","nextProps","nextState","this","markers","_this","iconImg","url","MapMarker","scaledSize","width","height","dist","google","zoom","initialCenter","lat","lng","disableDefaultUI","styles","elementType","stylers","color","visibility","featureType","map","m","key","id","position","Math","random","icon","animation","maps","Animation","BOUNCE","Component","GoogleApiWrapper","apiKey","TIMEOUT_SEND","Main","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","startSendingLove","uid","setState","status","firebase","functions","httpsCallable","addLove","then","result","currentDoc","data","timeoutSending","setTimeout","stopSendingLove","firestore","collection","doc","delete","catch","console","error","clearTimeout","state","loveStream","JSON","stringify","_this2","_this$state","log","src_MapContainer","onMouseDown","onMouseUp","onMouseLeave","onTouchStart","onTouchEnd","React","App","loading","auth","subscribe","_","unsubscribe","signInAnonymously","user","_this3","Promise","resolve","reject","unsubscribeFn","onSnapshot","querySnapshot","forEach","push","Loading_Loading","src_Main","Boolean","window","location","hostname","match","initializeApp","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0NCE3BC,EAAU,SAAAC,GACrB,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,oDCDAE,gMACmBC,EAAWC,GAChC,OAAIC,KAAKR,MAAMS,UAAYH,EAAUG,yCAO7B,IAAAC,EAAAF,KAGFG,EAAU,CACdC,IAAKC,IACLC,WAAY,CAAEC,MAAO,GAAIC,OAAQ,KAOnC,OACEf,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACc,EAAA,IAAD,CAAKC,OAAQV,KAAKR,MAAMkB,OACtBC,KAJO,EAKPC,cATS,CACbC,IAAK,IACLC,KAAM,IAQFC,kBAAkB,EAClBC,OAhBY,CAAC,CAACC,YAAc,WAAWC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACF,YAAc,cAAcC,QAAU,CAAC,CAACE,WAAa,SAAS,CAACH,YAAc,mBAAmBC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACF,YAAc,qBAAqBC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACE,YAAc,6BAA6BJ,YAAc,mBAAmBC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACE,YAAc,MAAMJ,YAAc,WAAWC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACE,YAAc,MAAMJ,YAAc,mBAAmBC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACE,YAAc,WAAWJ,YAAc,WAAWC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACE,YAAc,WAAWJ,YAAc,mBAAmBC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACE,YAAc,OAAOJ,YAAc,WAAWC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACE,YAAc,gBAAgBJ,YAAc,mBAAmBC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACE,YAAc,eAAeJ,YAAc,WAAWC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACE,YAAc,eAAeJ,YAAc,mBAAmBC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACE,YAAc,aAAaJ,YAAc,mBAAmBC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACE,YAAc,eAAeJ,YAAc,WAAWC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACE,YAAc,kBAAkBJ,YAAc,WAAWC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACE,YAAc,QAAQJ,YAAc,WAAWC,QAAU,CAAC,CAACC,MAAQ,aAAa,CAACE,YAAc,QAAQJ,YAAc,mBAAmBC,QAAU,CAAC,CAACC,MAAQ,eAiBz+CnB,KAAKR,MAAMS,QAAQqB,IAAI,SAAAC,GAEtB,OAAO9B,EAAAC,EAAAC,cAACc,EAAA,OAAD,CACLe,IAAKD,EAAEE,GACPC,SAAU,CAAEb,IAAKU,EAAEV,IAAsB,EAAhBc,KAAKC,SAAcd,IAAKS,EAAET,IAAsB,EAAhBa,KAAKC,UAC9DC,KAAM1B,EACN2B,UAAW5B,EAAKV,MAAMkB,OAAOqB,KAAKC,UAAUC,oBAlC/BC,aA4CZC,6BAAiB,CAC/BC,OAAS,2CADKD,CAEZtC,mBC5CGwC,eAAe,KA6ENC,cA1Eb,SAAAA,EAAa9C,GAAO,IAAAU,EAAA,OAAAqC,OAAAC,EAAA,EAAAD,CAAAvC,KAAAsC,IAClBpC,EAAAqC,OAAAE,EAAA,EAAAF,CAAAvC,KAAAuC,OAAAG,EAAA,EAAAH,CAAAD,GAAAK,KAAA3C,KAAMR,KAcRoD,iBAAmB,SAACC,GAClB3C,EAAK4C,SAAS,CAACC,OAAQ,aAEPC,IAASC,YAAYC,cAAc,UACnDC,CAAQ,CAAEN,QACPO,KAAK,SAACC,GACLnD,EAAKoD,WAAaD,EAAOE,KAAK9B,GAE9BvB,EAAK4C,SAAS,CAACC,OAAQ,YAEvB7C,EAAKsD,eAAiBC,WAAW,WAC/BvD,EAAKwD,mBACJrB,MA3BWnC,EA+BpBwD,gBAAkB,WACZxD,EAAKoD,aACPN,IACGW,YACAC,WAAW,QACXC,IAAI3D,EAAKoD,YACTQ,SACAC,MAAMC,QAAQC,OACjB/D,EAAKoD,WAAa,KACdpD,EAAKsD,iBACPU,aAAahE,EAAKsD,gBAClBtD,EAAKsD,eAAiB,MAExBtD,EAAK4C,SAAS,CAACC,OAAQ,WA1CzB7C,EAAKoD,WAAa,KAClBpD,EAAKiE,MAAQ,CACXpB,OAAQ,OACRqB,WAAY5E,EAAM4E,YALFlE,yFASOJ,GACrBuE,KAAKC,UAAUxE,EAAUsE,cAAgBC,KAAKC,UAAUtE,KAAKmE,MAAMC,aACrEpE,KAAK8C,SAAS,CAAEsB,WAAYtE,EAAUsE,8CAqChC,IAAAG,EAAAvE,KACA6C,EAAQ7C,KAAKR,MAAbqD,IADA2B,EAEuBxE,KAAKmE,MAA5BC,EAFAI,EAEAJ,WAAYrB,EAFZyB,EAEYzB,OAGpB,OADAiB,QAAQS,IAAI1B,EAAQqB,GAElB3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAC+E,EAAD,CAAczE,QAASmE,KAEzB3E,EAAAC,EAAAC,cAAA,OACEC,UAAW,UAAYmD,EACvB4B,YAAa,kBAAMJ,EAAK3B,iBAAiBC,IACzC+B,UAAW,kBAAML,EAAKb,mBACtBmB,aAAc,kBAAMN,EAAKb,mBACzBoB,aAAc,kBAAMP,EAAK3B,iBAAiBC,IAC1CkC,WAAY,kBAAMR,EAAKb,qBAEf,aAATX,EACCtD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAAf,cACD,aArEUoF,IAAM9C,WCwEV+C,qBAxEb,SAAAA,EAAazF,GAAO,IAAAU,EAAA,OAAAqC,OAAAC,EAAA,EAAAD,CAAAvC,KAAAiF,IAClB/E,EAAAqC,OAAAE,EAAA,EAAAF,CAAAvC,KAAAuC,OAAAG,EAAA,EAAAH,CAAA0C,GAAAtC,KAAA3C,KAAMR,KACD2E,MAAQ,CACXe,SAAS,EACTd,WAAY,IAJIlE,mFAQC,IAAAqE,EAAAvE,KACnBA,KAAKmF,OACF/B,KAAK,SAAAP,GAEJ,OADA0B,EAAKzB,SAAS,CAAED,QACT0B,EAAKa,cAEbhC,KAAK,SAAAiC,GACJd,EAAKzB,SAAS,CAAEoC,SAAS,MAE1BnB,MAAMC,QAAQC,sDAIjBjE,KAAKsF,6CAIL,OAAOtC,IAASmC,OAAOI,oBACpBnC,KAAK,SAAAC,GAAM,OAAIA,EAAOmC,KAAK3C,0CAGnB,IAAA4C,EAAAzF,KACX,OAAO,IAAI0F,QAAQ,SAACC,EAASC,GAC3BH,EAAKI,cAAgB7C,IAClBW,YACAC,WAAW,QACXkC,WACC,SAACC,GACC,IAAM3B,EAAa,GACnB2B,EAAcC,QAAQ,SAACnC,GACrB,IAAIN,EAAOM,EAAIN,OACfA,EAAK9B,GAAKoC,EAAIpC,GACd2C,EAAW6B,KAAK1C,KAElBS,QAAQS,IAAIL,GACZqB,EAAK3C,SAAS,CAAEsB,gBAElB,SAACH,GACCD,QAAQC,MAAMA,GACd2B,EAAO3B,KAGb0B,4CAKE3F,KAAK6F,eACP7F,KAAK6F,iDAIC,IAAArB,EAC6BxE,KAAKmE,MAAlCe,EADAV,EACAU,QAASrC,EADT2B,EACS3B,IAAKuB,EADdI,EACcJ,WACtB,OACE3E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACZsF,EACGzF,EAAAC,EAAAC,cAACuG,EAAD,MACAzG,EAAAC,EAAAC,cAACwG,EAAD,CAAMtD,IAAKA,EAAKuB,WAAYA,YAnEtBY,IAAM9C,YCKJkE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCDNxD,IAASyD,cATc,CACrBrE,OAAQ,0CACRsE,WAAY,gCACZC,YAAa,uCACbC,UAAW,gBACXC,cAAe,4BACfC,kBAAmB,eACnBC,MAAO,wCAITC,IAASC,OAAOxH,EAAAC,EAAAC,cAACuH,EAAD,MAASC,SAASC,eAAe,SD8G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnE,KAAK,SAAAoE,GACjCA,EAAaC","file":"static/js/main.89ca2bdd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/marcador-map.2e5b9891.svg\";","import React from 'react'\n\nexport const Loading = props => {\n  return (\n    <div className='Loading'>\n      <label>Cargando</label>\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react';\nimport MapMarker from './images/marcador-map.svg'\n\nclass MapContainer extends Component {\n  shouldComponentUpdate (nextProps, nextState) {\n    if (this.props.markers === nextProps.markers) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  render () {\n\n    const mapStyles = [{\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#f5f5f5\"}]},{\"elementType\":\"labels.icon\",\"stylers\":[{\"visibility\":\"off\"}]},{\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#616161\"}]},{\"elementType\":\"labels.text.stroke\",\"stylers\":[{\"color\":\"#f5f5f5\"}]},{\"featureType\":\"administrative.land_parcel\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#bdbdbd\"}]},{\"featureType\":\"poi\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#eeeeee\"}]},{\"featureType\":\"poi\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#757575\"}]},{\"featureType\":\"poi.park\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#e5e5e5\"}]},{\"featureType\":\"poi.park\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#9e9e9e\"}]},{\"featureType\":\"road\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#ffffff\"}]},{\"featureType\":\"road.arterial\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#757575\"}]},{\"featureType\":\"road.highway\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#dadada\"}]},{\"featureType\":\"road.highway\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#616161\"}]},{\"featureType\":\"road.local\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#9e9e9e\"}]},{\"featureType\":\"transit.line\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#e5e5e5\"}]},{\"featureType\":\"transit.station\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#eeeeee\"}]},{\"featureType\":\"water\",\"elementType\":\"geometry\",\"stylers\":[{\"color\":\"#c9c9c9\"}]},{\"featureType\":\"water\",\"elementType\":\"labels.text.fill\",\"stylers\":[{\"color\":\"#9e9e9e\"}]}];\n    const iconImg = {\n      url: MapMarker,\n      scaledSize: { width: 40, height: 50 }\n    }\n    const center = {\n      lat: 6.5,\n      lng: -23.0\n    }\n    const zoom = 2\n    return (  \n      <div>\n        <Map google={this.props.google} \n          zoom={zoom}\n          initialCenter={center}\n          disableDefaultUI={false}\n          styles={mapStyles}>\n          {this.props.markers.map(m => {\n\n            return <Marker\n              key={m.id}\n              position={{ lat: m.lat + Math.random() * 5, lng: m.lng + Math.random() * 5 }}\n              icon={iconImg}\n              animation={this.props.google.maps.Animation.BOUNCE}\n            />\n          })\n          }\n        </Map>\n      </div>\n    );\n  }\n}\n\nexport default GoogleApiWrapper({\n apiKey: ('AIzaSyD5zH02J4e_3_yLAUa01_Ulo3RZ2sVw1ho')\n})(MapContainer);","import React from 'react'\nimport MapContainer from './MapContainer'\nimport firebase from 'firebase/app'\nimport 'firebase/firestore'\nimport 'firebase/functions'\n\nconst TIMEOUT_SEND = 30000\n\nclass Main extends React.Component {\n  constructor (props) {\n    super(props)\n    this.currentDoc = null\n    this.state = {\n      status: 'idle',\n      loveStream: props.loveStream\n    }\n  }\n\n  componentWillReceiveProps (nextProps) {\n    if (JSON.stringify(nextProps.loveStream) !== JSON.stringify(this.state.loveStream)) {\n      this.setState({ loveStream: nextProps.loveStream })\n    }\n  }\n\n  startSendingLove = (uid) => {\n    this.setState({status: 'starting'})\n\n    const addLove = firebase.functions().httpsCallable('addLove')\n    addLove({ uid })\n      .then((result) => {\n        this.currentDoc = result.data.id\n\n        this.setState({status: 'sending'})\n\n        this.timeoutSending = setTimeout(() => {\n          this.stopSendingLove()\n        }, TIMEOUT_SEND)\n      })\n  }\n  \n  stopSendingLove = () => {\n    if (this.currentDoc) {\n      firebase\n        .firestore()\n        .collection('love')\n        .doc(this.currentDoc)\n        .delete()\n        .catch(console.error)\n      this.currentDoc = null\n      if (this.timeoutSending) {\n        clearTimeout(this.timeoutSending)\n        this.timeoutSending = null\n      }\n      this.setState({status: 'idle'})\n    }\n  }\n\n  render () {\n    const { uid } = this.props\n    const { loveStream, status } = this.state\n\n    console.log(status, loveStream)\n    return (\n      <div className='Main'>\n        <div className='Background'>\n          <MapContainer markers={loveStream}/>\n        </div>\n        <div\n          className={'Button ' + status}\n          onMouseDown={() => this.startSendingLove(uid)}\n          onMouseUp={() => this.stopSendingLove()}\n          onMouseLeave={() => this.stopSendingLove()}\n          onTouchStart={() => this.startSendingLove(uid)}\n          onTouchEnd={() => this.stopSendingLove()}\n        />\n        {status==='starting'\n        ? <div className='Status'>CONECTANDO</div>\n        :null\n        }\n      </div>\n    )\n  }\n}\nexport default Main\n","import React from 'react'\nimport { Loading } from './Loading'\nimport Main from './Main'\nimport firebase from 'firebase/app'\nimport 'firebase/auth'\nimport 'firebase/firestore'\n\nclass App extends React.Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      loading: true,\n      loveStream: []\n    }\n  }\n\n  componentDidMount () {\n    this.auth()\n      .then(uid => {\n        this.setState({ uid })\n        return this.subscribe()\n      })\n      .then(_ => {\n        this.setState({ loading: false })\n      })\n      .catch(console.error)\n  }\n\n  componentWillUnmount () {\n    this.unsubscribe()\n  }\n\n  auth () {\n    return firebase.auth().signInAnonymously()\n      .then(result => result.user.uid)\n  }\n\n  subscribe () {\n    return new Promise((resolve, reject) => {\n      this.unsubscribeFn = firebase\n        .firestore()\n        .collection('love')\n        .onSnapshot(\n          (querySnapshot) => {\n            const loveStream = []\n            querySnapshot.forEach((doc) => {\n              let data = doc.data()\n              data.id = doc.id\n              loveStream.push(data)\n            })\n            console.log(loveStream)\n            this.setState({ loveStream })\n          },\n          (error) => {\n            console.error(error)\n            reject(error)\n          }\n        )\n      resolve()\n    })\n  }\n\n  unsubscribe () {\n    if (this.unsubscribeFn) {\n      this.unsubscribeFn()\n    }\n  }\n\n  render () {\n    const { loading, uid, loveStream } = this.state\n    return (\n      <div className='App'>\n        {loading\n          ? <Loading />\n          : <Main uid={uid} loveStream={loveStream} />\n        }\n      </div>\n    )\n  }\n}\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport firebase from 'firebase/app'\n\nconst firebaseConfig = {\n  apiKey: 'AIzaSyD5zH02J4e_3_yLAUa01_Ulo3RZ2sVw1ho',\n  authDomain: 'extralove-app.firebaseapp.com',\n  databaseURL: 'https://extralove-app.firebaseio.com',\n  projectId: 'extralove-app',\n  storageBucket: 'extralove-app.appspot.com',\n  messagingSenderId: '854296626077',\n  appId: '1:854296626077:web:269f38768aa35be4'\n}\nfirebase.initializeApp(firebaseConfig)\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}